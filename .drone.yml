kind: pipeline
name: tests

environment:
  MIX_ENV: test
  ELIXIR_ASSERT_TIMEOUT: 500

steps:
  - name: restore-cache
    image: meltwater/drone-cache
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
    pull: true
    settings:
      endpoint: https://minio.blubeacon.com
      restore: true
      path_style: true
      #cache_key: {{ .Commit.Branch }}-{{ checksum "go.mod" }} # default if ommitted is {{ .Commit.Branch }}
      bucket: drone-cache-bucket
      region: us-east-1
      mount:
        - 'deps'
        - '_build'

  - name: install
    image: elixir:1.10
    volumes:
    - name: mix
      path: /root/.mix
    commands:
    - mix local.rebar --force
    - mix local.hex --force
    - mix do deps.get, compile    

  - name: test
    image: elixir:1.10
    volumes:
    - name: mix
      path: /root/.mix
    commands:
    - mix format --check-formatted
    - mix test    
  
  - name: rebuild-cache
    image: meltwater/drone-cache
    pull: true
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
    settings:
      endpoint: https://minio.blubeacon.com
      path_style: true
      rebuild: true
      #cache_key: {{ .Commit.Branch }}-{{ checksum "go.mod" }} # default if ommitted is {{ .Commit.Branch }}
      bucket: drone-cache-bucket
      region: us-east-1
      mount:
        - 'deps'
        - '_build'

  
services:
  - name: database
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: teslamate_test

volumes:
- name: mix
  temp: {}

---
kind: pipeline
name: docker-build

trigger:
  event:
    exclude:
      - pull_request

steps:
- name: shellcheck
  image: koalaman/shellcheck-alpine
  pull: always
  commands:
    - shellcheck --version
    - for file in $(find ./root -type f); do echo $file; shellcheck $file; done;

- name: teslamate-dev-build
  image: plugins/docker
  pull: always
  settings:
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password
    repo: vertigo235/teslamate
    tags: 
        - '${DRONE_BRANCH}'
        - '${DRONE_BRANCH}-${DRONE_COMMIT:0:6}'
    cache_from: vertigo235/teslamate
  when:
    branch:
      exclude:
        - master
    event:
      - push
  depends_on:
    - clone

- name: grafana-dev-build
  image: plugins/docker
  pull: always
  settings:
    dockerfile: grafana/Dockerfile
    context: grafana/
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password
    repo: vertigo235/teslamate-grafana
    tags: 
        - '${DRONE_BRANCH}'
        - '${DRONE_BRANCH}-${DRONE_COMMIT:0:6}'
    cache_from: vertigo235/teslamate-grafana
  when:
    branch:
      exclude:
        - master
    event:
      - push
  depends_on:
    - clone

- name: teslamate-build
  image: plugins/docker
  pull: always
  settings:
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password
    repo: vertigo235/teslamate
    tags:
      - latest
      - '1'
      - '1.20'
      - '1.20.${DRONE_BUILD_NUMBER}'
    #auto_tag: true
    cache_from: vertigo235/teslamate
  when:
    branch:
      - master
  depends_on:
    - clone
    
- name: teslamate-grafana-build
  image: plugins/docker
  pull: always
  settings:
    dockerfile: grafana/Dockerfile
    context: grafana/
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password
    repo: vertigo235/teslamate-grafana
    tags:
      - latest
      - '1'
      - '1.20'
      - '1.20.${DRONE_BUILD_NUMBER}'
    #auto_tag: true
    cache_from: vertigo235/teslamate-grafana
  when:
    branch:
      - master
  depends_on:
    - clone